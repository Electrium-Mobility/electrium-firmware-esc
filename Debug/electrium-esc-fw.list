<<<<<<< HEAD

electrium-esc-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000080c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000818  20000818  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214c  00000000  00000000  00031221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00034420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223d1  00000000  00000000  000353d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b29  00000000  00000000  000577a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7865  00000000  00000000  000692d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140b37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004848  00000000  00000000  00140b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043dc 	.word	0x080043dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043dc 	.word	0x080043dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f90a 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f860 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fcb6 	bl	8000e48 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004dc:	f000 fa92 	bl	8000a04 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004e0:	f000 fb54 	bl	8000b8c <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e4:	f000 fc82 	bl	8000dec <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80004e8:	f000 fbe8 	bl	8000cbc <MX_TIM4_Init>
  MX_SPI3_Init();
 80004ec:	f000 fa54 	bl	8000998 <MX_SPI3_Init>
  MX_ADC1_Init();
 80004f0:	f000 f8bc 	bl	800066c <MX_ADC1_Init>
  MX_ADC2_Init();
 80004f4:	f000 f90c 	bl	8000710 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004f8:	f000 f95c 	bl	80007b4 <MX_ADC3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f9e0 	bl	80008c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000500:	f000 fa14 	bl	800092c <MX_SPI2_Init>
  MX_CAN1_Init();
 8000504:	f000 f9a8 	bl	8000858 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  // Timer 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Motor Driver B L2 (PE9)
 8000508:	2100      	movs	r1, #0
 800050a:	481e      	ldr	r0, [pc, #120]	; (8000584 <main+0xb8>)
 800050c:	f002 fe08 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Motor Driver B H2 (PE11)
 8000510:	2104      	movs	r1, #4
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <main+0xb8>)
 8000514:	f002 fe04 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Motor Driver B L1 (PE13)
 8000518:	2108      	movs	r1, #8
 800051a:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0xb8>)
 800051c:	f002 fe00 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Motor Driver B H1 (PE14)
 8000520:	210c      	movs	r1, #12
 8000522:	4818      	ldr	r0, [pc, #96]	; (8000584 <main+0xb8>)
 8000524:	f002 fdfc 	bl	8003120 <HAL_TIM_PWM_Start>
  // Timer 2
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Motor Driver A L1 (PC6)
 8000528:	2100      	movs	r1, #0
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <main+0xbc>)
 800052c:	f002 fdf8 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Motor Driver A H1 (PC7)
 8000530:	2104      	movs	r1, #4
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <main+0xbc>)
 8000534:	f002 fdf4 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor Driver B H3 (PB0)
 8000538:	2108      	movs	r1, #8
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0xbc>)
 800053c:	f002 fdf0 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor Driver B L3 (PB1)
 8000540:	210c      	movs	r1, #12
 8000542:	4811      	ldr	r0, [pc, #68]	; (8000588 <main+0xbc>)
 8000544:	f002 fdec 	bl	8003120 <HAL_TIM_PWM_Start>
  // Timer 3
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Motor Driver A L3 (PD12
 8000548:	2100      	movs	r1, #0
 800054a:	4810      	ldr	r0, [pc, #64]	; (800058c <main+0xc0>)
 800054c:	f002 fde8 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Motor Driver A H3 (PD13)
 8000550:	2104      	movs	r1, #4
 8000552:	480e      	ldr	r0, [pc, #56]	; (800058c <main+0xc0>)
 8000554:	f002 fde4 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Motor Driver A L2 (PD14)
 8000558:	2108      	movs	r1, #8
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <main+0xc0>)
 800055c:	f002 fde0 	bl	8003120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Motor Driver A H2 (PD15)
 8000560:	210c      	movs	r1, #12
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0xc0>)
 8000564:	f002 fddc 	bl	8003120 <HAL_TIM_PWM_Start>

  // Test PWM
  TIM3->CCR2 = 20000;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0xc4>)
 800056a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800056e:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0xc8>)
 8000574:	f001 ff47 	bl	8002406 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057c:	f001 f926 	bl	80017cc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000580:	e7f6      	b.n	8000570 <main+0xa4>
 8000582:	bf00      	nop
 8000584:	20000230 	.word	0x20000230
 8000588:	20000278 	.word	0x20000278
 800058c:	200002c0 	.word	0x200002c0
 8000590:	40000400 	.word	0x40000400
 8000594:	40020400 	.word	0x40020400

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 ff10 	bl	80043cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000608:	230f      	movs	r3, #15
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 225;
 800060c:	23e1      	movs	r3, #225	; 0xe1
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000614:	2305      	movs	r3, #5
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f002 f829 	bl	8002674 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 fcfa 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fa8a 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000656:	f000 fce3 	bl	8001020 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_ADC1_Init+0x98>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <MX_ADC1_Init+0x9c>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_ADC1_Init+0x98>)
 8000686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <MX_ADC1_Init+0xa0>)
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ADC1_Init+0x98>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ce:	f001 f8a1 	bl	8001814 <HAL_ADC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 fca2 	bl	8001020 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006dc:	2310      	movs	r3, #16
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ee:	f001 f8d5 	bl	800189c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f8:	f000 fc92 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	40012000 	.word	0x40012000
 800070c:	0f000001 	.word	0x0f000001

08000710 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC2_Init+0x9c>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC2_Init+0x98>)
 800072a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800072e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ADC2_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ADC2_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_ADC2_Init+0xa0>)
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_ADC2_Init+0x98>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC2_Init+0x98>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000772:	f001 f84f 	bl	8001814 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fc50 	bl	8001020 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000780:	230a      	movs	r3, #10
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_ADC2_Init+0x98>)
 8000792:	f001 f883 	bl	800189c <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 fc40 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000070 	.word	0x20000070
 80007ac:	40012100 	.word	0x40012100
 80007b0:	0f000001 	.word	0x0f000001

080007b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_ADC3_Init+0x98>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <MX_ADC3_Init+0x9c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ADC3_Init+0x98>)
 80007ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_ADC3_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ADC3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_ADC3_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_ADC3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ADC3_Init+0x98>)
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_ADC3_Init+0xa0>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC3_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_ADC3_Init+0x98>)
 8000802:	2201      	movs	r2, #1
 8000804:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ADC3_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC3_Init+0x98>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_ADC3_Init+0x98>)
 8000816:	f000 fffd 	bl	8001814 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fbfe 	bl	8001020 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000824:	2306      	movs	r3, #6
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC3_Init+0x98>)
 8000836:	f001 f831 	bl	800189c <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fbee 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000b8 	.word	0x200000b8
 8000850:	40012200 	.word	0x40012200
 8000854:	0f000001 	.word	0x0f000001

08000858 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_CAN1_Init+0x60>)
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_CAN1_Init+0x64>)
 8000860:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_CAN1_Init+0x60>)
 8000864:	2210      	movs	r2, #16
 8000866:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_CAN1_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_CAN1_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_CAN1_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_CAN1_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_CAN1_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_CAN1_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_CAN1_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_CAN1_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_CAN1_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_CAN1_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_CAN1_Init+0x60>)
 80008a6:	f001 fa17 	bl	8001cd8 <HAL_CAN_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 fbb6 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000100 	.word	0x20000100
 80008bc:	40006400 	.word	0x40006400

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI1_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI1_Init+0x64>)
 8000912:	f002 fad3 	bl	8002ebc <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 fb80 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000128 	.word	0x20000128
 8000928:	40013000 	.word	0x40013000

0800092c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI2_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI2_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI2_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI2_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI2_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI2_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI2_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI2_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI2_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI2_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI2_Init+0x64>)
 800097e:	f002 fa9d 	bl	8002ebc <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 fb4a 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000180 	.word	0x20000180
 8000994:	40003800 	.word	0x40003800

08000998 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_SPI3_Init+0x64>)
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <MX_SPI3_Init+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI3_Init+0x64>)
 80009a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI3_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_SPI3_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI3_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI3_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI3_Init+0x64>)
 80009c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI3_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_SPI3_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI3_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_SPI3_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI3_Init+0x64>)
 80009e4:	220a      	movs	r2, #10
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_SPI3_Init+0x64>)
 80009ea:	f002 fa67 	bl	8002ebc <HAL_SPI_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80009f4:	f000 fb14 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200001d8 	.word	0x200001d8
 8000a00:	40003c00 	.word	0x40003c00

08000a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b096      	sub	sp, #88	; 0x58
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2220      	movs	r2, #32
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fcc5 	bl	80043cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a42:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a44:	4a50      	ldr	r2, [pc, #320]	; (8000b88 <MX_TIM1_Init+0x184>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a48:	4b4e      	ldr	r3, [pc, #312]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a54:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a6e:	4845      	ldr	r0, [pc, #276]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a70:	f002 faad 	bl	8002fce <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a7a:	f000 fad1 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a88:	4619      	mov	r1, r3
 8000a8a:	483e      	ldr	r0, [pc, #248]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a8c:	f002 fcd2 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a96:	f000 fac3 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000a9c:	f002 fae6 	bl	800306c <HAL_TIM_PWM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000aa6:	f000 fabb 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4832      	ldr	r0, [pc, #200]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000aba:	f003 f893 	bl	8003be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ac4:	f000 faac 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000aee:	f002 fbdf 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000af8:	f000 fa92 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	2204      	movs	r2, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	481f      	ldr	r0, [pc, #124]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000b06:	f002 fbd3 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b10:	f000 fa86 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2208      	movs	r2, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4819      	ldr	r0, [pc, #100]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000b1e:	f002 fbc7 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b28:	f000 fa7a 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	220c      	movs	r2, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000b36:	f002 fbbb 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b40:	f000 fa6e 	bl	8001020 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000b68:	f003 f8b8 	bl	8003cdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b72:	f000 fa55 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM1_Init+0x180>)
 8000b78:	f000 fc58 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3758      	adds	r7, #88	; 0x58
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000230 	.word	0x20000230
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000bbe:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <MX_TIM3_Init+0x12c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bce:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be2:	4834      	ldr	r0, [pc, #208]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000be4:	f002 f9f3 	bl	8002fce <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bee:	f000 fa17 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	482d      	ldr	r0, [pc, #180]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c00:	f002 fc18 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c0a:	f000 fa09 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c0e:	4829      	ldr	r0, [pc, #164]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c10:	f002 fa2c 	bl	800306c <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c1a:	f000 fa01 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4821      	ldr	r0, [pc, #132]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c2e:	f002 ffd9 	bl	8003be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c38:	f000 f9f2 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c54:	f002 fb2c 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c5e:	f000 f9df 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2204      	movs	r2, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c6a:	f002 fb21 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c74:	f000 f9d4 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c80:	f002 fb16 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000c8a:	f000 f9c9 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	220c      	movs	r2, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000c96:	f002 fb0b 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000ca0:	f000 f9be 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <MX_TIM3_Init+0x128>)
 8000ca6:	f000 fbc1 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	; 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000278 	.word	0x20000278
 8000cb8:	40000400 	.word	0x40000400

08000cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000cee:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <MX_TIM4_Init+0x12c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cfe:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d14:	f002 f95b 	bl	8002fce <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d1e:	f000 f97f 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d30:	f002 fb80 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d3a:	f000 f971 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d3e:	4829      	ldr	r0, [pc, #164]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d40:	f002 f994 	bl	800306c <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d4a:	f000 f969 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d5e:	f002 ff41 	bl	8003be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d68:	f000 f95a 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d84:	f002 fa94 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d8e:	f000 f947 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000d9a:	f002 fa89 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000da4:	f000 f93c 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000db0:	f002 fa7e 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000dba:	f000 f931 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000dc6:	f002 fa73 	bl	80032b0 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000dd0:	f000 f926 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM4_Init+0x128>)
 8000dd6:	f000 fb29 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200002c0 	.word	0x200002c0
 8000de8:	40000800 	.word	0x40000800

08000dec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000df6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e30:	f001 fb03 	bl	800243a <HAL_PCD_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e3a:	f000 f8f1 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000308 	.word	0x20000308

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	; 0x38
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
 8000e62:	4b69      	ldr	r3, [pc, #420]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a68      	ldr	r2, [pc, #416]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b66      	ldr	r3, [pc, #408]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a61      	ldr	r2, [pc, #388]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b58      	ldr	r3, [pc, #352]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b54      	ldr	r3, [pc, #336]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a53      	ldr	r2, [pc, #332]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b51      	ldr	r3, [pc, #324]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b46      	ldr	r3, [pc, #280]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a45      	ldr	r2, [pc, #276]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a37      	ldr	r2, [pc, #220]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <MX_GPIO_Init+0x1c0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f248 011c 	movw	r1, #32796	; 0x801c
 8000f44:	4831      	ldr	r0, [pc, #196]	; (800100c <MX_GPIO_Init+0x1c4>)
 8000f46:	f001 fa45 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
 8000f50:	482f      	ldr	r0, [pc, #188]	; (8001010 <MX_GPIO_Init+0x1c8>)
 8000f52:	f001 fa3f 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	482d      	ldr	r0, [pc, #180]	; (8001014 <MX_GPIO_Init+0x1cc>)
 8000f5e:	f001 fa39 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f68:	482b      	ldr	r0, [pc, #172]	; (8001018 <MX_GPIO_Init+0x1d0>)
 8000f6a:	f001 fa33 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8000f6e:	f248 031c 	movw	r3, #32796	; 0x801c
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_GPIO_Init+0x1c4>)
 8000f88:	f001 f888 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_7;
 8000f8c:	f44f 5342 	mov.w	r3, #12416	; 0x3080
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481a      	ldr	r0, [pc, #104]	; (8001010 <MX_GPIO_Init+0x1c8>)
 8000fa6:	f001 f879 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <MX_GPIO_Init+0x1cc>)
 8000fc4:	f001 f86a 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000fc8:	2390      	movs	r3, #144	; 0x90
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4810      	ldr	r0, [pc, #64]	; (800101c <MX_GPIO_Init+0x1d4>)
 8000fdc:	f001 f85e 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_GPIO_Init+0x1d0>)
 8000ffa:	f001 f84f 	bl	800209c <HAL_GPIO_Init>

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	; 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40020800 	.word	0x40020800
 800101c:	40021800 	.word	0x40021800

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a38      	ldr	r2, [pc, #224]	; (800117c <HAL_ADC_MspInit+0x100>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10e      	bne.n	80010bc <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a36      	ldr	r2, [pc, #216]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010ba:	e05b      	b.n	8001174 <HAL_ADC_MspInit+0xf8>
  else if(hadc->Instance==ADC2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_ADC_MspInit+0x108>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d128      	bne.n	8001118 <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a2c      	ldr	r2, [pc, #176]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_ADC_MspInit+0x104>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010fe:	233f      	movs	r3, #63	; 0x3f
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	481d      	ldr	r0, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0x10c>)
 8001112:	f000 ffc3 	bl	800209c <HAL_GPIO_Init>
}
 8001116:	e02d      	b.n	8001174 <HAL_ADC_MspInit+0xf8>
  else if(hadc->Instance==ADC3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_ADC_MspInit+0x110>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d128      	bne.n	8001174 <HAL_ADC_MspInit+0xf8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <HAL_ADC_MspInit+0x104>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800115a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <HAL_ADC_MspInit+0x114>)
 8001170:	f000 ff94 	bl	800209c <HAL_GPIO_Init>
}
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40012000 	.word	0x40012000
 8001180:	40023800 	.word	0x40023800
 8001184:	40012100 	.word	0x40012100
 8001188:	40020800 	.word	0x40020800
 800118c:	40012200 	.word	0x40012200
 8001190:	40021400 	.word	0x40021400

08001194 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_CAN_MspInit+0x84>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12b      	bne.n	800120e <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_CAN_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_CAN_MspInit+0x88>)
 80011c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_CAN_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_CAN_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_CAN_MspInit+0x88>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_CAN_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ee:	2303      	movs	r3, #3
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011fe:	2309      	movs	r3, #9
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_CAN_MspInit+0x8c>)
 800120a:	f000 ff47 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40006400 	.word	0x40006400
 800121c:	40023800 	.word	0x40023800
 8001220:	40020c00 	.word	0x40020c00

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_SPI_MspInit+0x150>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12c      	bne.n	80012a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125e:	623b      	str	r3, [r7, #32]
 8001260:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a43      	ldr	r2, [pc, #268]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127e:	23e0      	movs	r3, #224	; 0xe0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128e:	2305      	movs	r3, #5
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4838      	ldr	r0, [pc, #224]	; (800137c <HAL_SPI_MspInit+0x158>)
 800129a:	f000 feff 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800129e:	e064      	b.n	800136a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_SPI_MspInit+0x15c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12d      	bne.n	8001306 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a2a      	ldr	r2, [pc, #168]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80012e2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012f4:	2305      	movs	r3, #5
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	4821      	ldr	r0, [pc, #132]	; (8001384 <HAL_SPI_MspInit+0x160>)
 8001300:	f000 fecc 	bl	800209c <HAL_GPIO_Init>
}
 8001304:	e031      	b.n	800136a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_SPI_MspInit+0x164>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d12c      	bne.n	800136a <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001348:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800135a:	2306      	movs	r3, #6
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <HAL_SPI_MspInit+0x168>)
 8001366:	f000 fe99 	bl	800209c <HAL_GPIO_Init>
}
 800136a:	bf00      	nop
 800136c:	3738      	adds	r7, #56	; 0x38
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40013000 	.word	0x40013000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000
 8001380:	40003800 	.word	0x40003800
 8001384:	40020400 	.word	0x40020400
 8001388:	40003c00 	.word	0x40003c00
 800138c:	40020800 	.word	0x40020800

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_TIM_Base_MspInit+0x8c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10e      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013be:	e026      	b.n	800140e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_TIM_Base_MspInit+0x94>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
}
 80013e6:	e012      	b.n	800140e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_TIM_Base_MspInit+0x98>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10d      	bne.n	800140e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40010000 	.word	0x40010000
 8001420:	40023800 	.word	0x40023800
 8001424:	40000400 	.word	0x40000400
 8001428:	40000800 	.word	0x40000800

0800142c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_TIM_MspPostInit+0x138>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11f      	bne.n	800148e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a44      	ldr	r2, [pc, #272]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800146a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4839      	ldr	r0, [pc, #228]	; (800156c <HAL_TIM_MspPostInit+0x140>)
 8001488:	f000 fe08 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800148c:	e065      	b.n	800155a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a37      	ldr	r2, [pc, #220]	; (8001570 <HAL_TIM_MspPostInit+0x144>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d13c      	bne.n	8001512 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a31      	ldr	r2, [pc, #196]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014d0:	2303      	movs	r3, #3
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4822      	ldr	r0, [pc, #136]	; (8001574 <HAL_TIM_MspPostInit+0x148>)
 80014ec:	f000 fdd6 	bl	800209c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001500:	2302      	movs	r3, #2
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <HAL_TIM_MspPostInit+0x14c>)
 800150c:	f000 fdc6 	bl	800209c <HAL_GPIO_Init>
}
 8001510:	e023      	b.n	800155a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_TIM_MspPostInit+0x150>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11e      	bne.n	800155a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_TIM_MspPostInit+0x13c>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001538:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800154a:	2302      	movs	r3, #2
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	480a      	ldr	r0, [pc, #40]	; (8001580 <HAL_TIM_MspPostInit+0x154>)
 8001556:	f000 fda1 	bl	800209c <HAL_GPIO_Init>
}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	40023800 	.word	0x40023800
 800156c:	40021000 	.word	0x40021000
 8001570:	40000400 	.word	0x40000400
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40000800 	.word	0x40000800
 8001580:	40020c00 	.word	0x40020c00

08001584 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a4:	d132      	bne.n	800160c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d4:	230a      	movs	r3, #10
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <HAL_PCD_MspInit+0x94>)
 80015e0:	f000 fd5c 	bl	800209c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ee:	6353      	str	r3, [r2, #52]	; 0x34
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_PCD_MspInit+0x90>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_PCD_MspInit+0x90>)
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f890 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169a:	490e      	ldr	r1, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b0:	4c0b      	ldr	r4, [pc, #44]	; (80016e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016be:	f7ff ffd7 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f002 fe5f 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7fe ff01 	bl	80004cc <main>
  bx  lr    
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016d8:	08004414 	.word	0x08004414
  ldr r2, =_sbss
 80016dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016e0:	20000818 	.word	0x20000818

080016e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_Init+0x40>)
 80016f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_Init+0x40>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x40>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 fc8f 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7ff fc86 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fc99 	bl	8002082 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 fc6f 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000008 	.word	0x20000008
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000814 	.word	0x20000814

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000814 	.word	0x20000814

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e033      	b.n	8001892 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fc22 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800185a:	f023 0302 	bic.w	r3, r3, #2
 800185e:	f043 0202 	orr.w	r2, r3, #2
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f93a 	bl	8001ae0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f023 0303 	bic.w	r3, r3, #3
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
 8001882:	e001      	b.n	8001888 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e105      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x228>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	d925      	bls.n	8001914 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68d9      	ldr	r1, [r3, #12]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	3b1e      	subs	r3, #30
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43da      	mvns	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68d9      	ldr	r1, [r3, #12]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	4603      	mov	r3, r0
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4403      	add	r3, r0
 8001906:	3b1e      	subs	r3, #30
 8001908:	409a      	lsls	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	e022      	b.n	800195a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	2207      	movs	r2, #7
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6919      	ldr	r1, [r3, #16]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	4603      	mov	r3, r0
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4403      	add	r3, r0
 8001950:	409a      	lsls	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d824      	bhi.n	80019ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b05      	subs	r3, #5
 8001974:	221f      	movs	r2, #31
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	400a      	ands	r2, r1
 8001982:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b05      	subs	r3, #5
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
 80019aa:	e04c      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d824      	bhi.n	80019fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b23      	subs	r3, #35	; 0x23
 80019c6:	221f      	movs	r2, #31
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43da      	mvns	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	400a      	ands	r2, r1
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b23      	subs	r3, #35	; 0x23
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	e023      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b41      	subs	r3, #65	; 0x41
 8001a10:	221f      	movs	r2, #31
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b41      	subs	r3, #65	; 0x41
 8001a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_ADC_ConfigChannel+0x234>)
 8001a48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_ADC_ConfigChannel+0x238>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1cc>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b12      	cmp	r3, #18
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_ADC_ConfigChannel+0x238>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d123      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d003      	beq.n	8001a82 <HAL_ADC_ConfigChannel+0x1e6>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d11b      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d111      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_ADC_ConfigChannel+0x23c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_ADC_ConfigChannel+0x240>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9a      	lsrs	r2, r3, #18
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae8:	4b79      	ldr	r3, [pc, #484]	; (8001cd0 <ADC_Init+0x1f0>)
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	021a      	lsls	r2, r3, #8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <ADC_Init+0x1f4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d022      	beq.n	8001bbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6899      	ldr	r1, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e00f      	b.n	8001bde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0202 	bic.w	r2, r2, #2
 8001bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7e1b      	ldrb	r3, [r3, #24]
 8001bf8:	005a      	lsls	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	3b01      	subs	r3, #1
 8001c38:	035a      	lsls	r2, r3, #13
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	e007      	b.n	8001c54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	051a      	lsls	r2, r3, #20
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c96:	025a      	lsls	r2, r3, #9
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6899      	ldr	r1, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	029a      	lsls	r2, r3, #10
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	609a      	str	r2, [r3, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40012300 	.word	0x40012300
 8001cd4:	0f000001 	.word	0x0f000001

08001cd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0ed      	b.n	8001ec6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fa4c 	bl	8001194 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff fd52 	bl	80017b4 <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d12:	e012      	b.n	8001d3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d14:	f7ff fd4e 	bl	80017b4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d90b      	bls.n	8001d3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2205      	movs	r2, #5
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0c5      	b.n	8001ec6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0e5      	beq.n	8001d14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0202 	bic.w	r2, r2, #2
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff fd2c 	bl	80017b4 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d5e:	e012      	b.n	8001d86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d60:	f7ff fd28 	bl	80017b4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b0a      	cmp	r3, #10
 8001d6c:	d90b      	bls.n	8001d86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e09f      	b.n	8001ec6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e5      	bne.n	8001d60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e1b      	ldrb	r3, [r3, #24]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e007      	b.n	8001dbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7e5b      	ldrb	r3, [r3, #25]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7e9b      	ldrb	r3, [r3, #26]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e007      	b.n	8001e12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0220 	bic.w	r2, r2, #32
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7edb      	ldrb	r3, [r3, #27]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0210 	bic.w	r2, r2, #16
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0210 	orr.w	r2, r2, #16
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7f1b      	ldrb	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0208 	orr.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e007      	b.n	8001e66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7f5b      	ldrb	r3, [r3, #29]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0204 	orr.w	r2, r2, #4
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e007      	b.n	8001e90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	ea42 0103 	orr.w	r1, r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff47 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff5c 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffb0 	bl	8001ff0 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e16b      	b.n	8002390 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 815a 	bne.w	800238a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d005      	beq.n	80020ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d130      	bne.n	8002150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0201 	and.w	r2, r3, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b03      	cmp	r3, #3
 800215a:	d017      	beq.n	800218c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d123      	bne.n	80021e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80b4 	beq.w	800238a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a5f      	ldr	r2, [pc, #380]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223e:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <HAL_GPIO_Init+0x310>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x314>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02b      	beq.n	80022c2 <HAL_GPIO_Init+0x226>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_GPIO_Init+0x318>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x222>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a50      	ldr	r2, [pc, #320]	; (80023b8 <HAL_GPIO_Init+0x31c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x21e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4f      	ldr	r2, [pc, #316]	; (80023bc <HAL_GPIO_Init+0x320>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x21a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4e      	ldr	r2, [pc, #312]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x216>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4d      	ldr	r2, [pc, #308]	; (80023c4 <HAL_GPIO_Init+0x328>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x212>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4c      	ldr	r2, [pc, #304]	; (80023c8 <HAL_GPIO_Init+0x32c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x20e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4b      	ldr	r2, [pc, #300]	; (80023cc <HAL_GPIO_Init+0x330>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x20a>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e00e      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022a6:	2308      	movs	r3, #8
 80022a8:	e00c      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e00a      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022c2:	2300      	movs	r3, #0
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d4:	4935      	ldr	r1, [pc, #212]	; (80023ac <HAL_GPIO_Init+0x310>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_GPIO_Init+0x334>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002306:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_GPIO_Init+0x334>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235a:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_GPIO_Init+0x334>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f ae90 	bls.w	80020b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4013      	ands	r3, r2
 800241e:	041a      	lsls	r2, r3, #16
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43d9      	mvns	r1, r3
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	400b      	ands	r3, r1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800243a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243c:	b08f      	sub	sp, #60	; 0x3c
 800243e:	af0a      	add	r7, sp, #40	; 0x28
 8002440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e10f      	b.n	800266c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff f88c 	bl	8001584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fcd9 	bl	8003e42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	687e      	ldr	r6, [r7, #4]
 8002498:	466d      	mov	r5, sp
 800249a:	f106 0410 	add.w	r4, r6, #16
 800249e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ae:	1d33      	adds	r3, r6, #4
 80024b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b2:	6838      	ldr	r0, [r7, #0]
 80024b4:	f001 fc64 	bl	8003d80 <USB_CoreInit>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0d0      	b.n	800266c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fcc7 	bl	8003e64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e04a      	b.n	8002572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	333d      	adds	r3, #61	; 0x3d
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	333c      	adds	r3, #60	; 0x3c
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	b298      	uxth	r0, r3
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3344      	adds	r3, #68	; 0x44
 8002518:	4602      	mov	r2, r0
 800251a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3340      	adds	r3, #64	; 0x40
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3348      	adds	r3, #72	; 0x48
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	; 0x4c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3354      	adds	r3, #84	; 0x54
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3af      	bcc.n	80024dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e044      	b.n	800260c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	3301      	adds	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3b5      	bcc.n	8002582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	687e      	ldr	r6, [r7, #4]
 800261e:	466d      	mov	r5, sp
 8002620:	f106 0410 	add.w	r4, r6, #16
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002630:	e885 0003 	stmia.w	r5, {r0, r1}
 8002634:	1d33      	adds	r3, r6, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f001 fc5f 	bl	8003efc <USB_DevInit>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e00d      	b.n	800266c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fe2a 	bl	80042be <USB_DevDisconnect>

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e267      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d075      	beq.n	800277e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002692:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b82      	ldr	r3, [pc, #520]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d157      	bne.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e242      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x74>
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a75      	ldr	r2, [pc, #468]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x98>
 80026f2:	4b70      	ldr	r3, [pc, #448]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6f      	ldr	r2, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6c      	ldr	r2, [pc, #432]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 800270c:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff f842 	bl	80017b4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff f83e 	bl	80017b4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e207      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xc0>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff f82e 	bl	80017b4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff f82a 	bl	80017b4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e1f3      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0xe8>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d063      	beq.n	8002852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d11c      	bne.n	80027dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x152>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1c7      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	e03a      	b.n	8002852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x244>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe ffe3 	bl	80017b4 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe ffdf 	bl	80017b4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1a8      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4925      	ldr	r1, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x244>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe ffc2 	bl	80017b4 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe ffbe 	bl	80017b4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e187      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d036      	beq.n	80028cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0x248>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe ffa2 	bl	80017b4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe ff9e 	bl	80017b4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e167      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x200>
 8002892:	e01b      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x248>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe ff8b 	bl	80017b4 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	e00e      	b.n	80028c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe ff87 	bl	80017b4 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d907      	bls.n	80028c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e150      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	42470000 	.word	0x42470000
 80028bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ea      	bne.n	80028a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8097 	beq.w	8002a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b7d      	ldr	r3, [pc, #500]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a7c      	ldr	r2, [pc, #496]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b7a      	ldr	r3, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a73      	ldr	r2, [pc, #460]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe ff47 	bl	80017b4 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe ff43 	bl	80017b4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e10c      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x2ea>
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a63      	ldr	r2, [pc, #396]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	; 0x70
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x324>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x30c>
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a5e      	ldr	r2, [pc, #376]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a5b      	ldr	r2, [pc, #364]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0x324>
 8002980:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe ff08 	bl	80017b4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe ff04 	bl	80017b4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0cb      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCC_OscConfig+0x334>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fef2 	bl	80017b4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe feee 	bl	80017b4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0b5      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ee      	bne.n	80029d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fc:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a1 	beq.w	8002b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a12:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d05c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d141      	bne.n	8002aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fec2 	bl	80017b4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe febe 	bl	80017b4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e087      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	491b      	ldr	r1, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe fe97 	bl	80017b4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe fe93 	bl	80017b4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e05c      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x416>
 8002aa8:	e054      	b.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fe80 	bl	80017b4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fe7c 	bl	80017b4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e045      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x444>
 8002ad6:	e03d      	b.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e038      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x4ec>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d028      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d121      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d11a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cc      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90c      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d044      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e067      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4934      	ldr	r1, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fdae 	bl	80017b4 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fdaa 	bl	80017b4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fd0e 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	080043f4 	.word	0x080043f4
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b090      	sub	sp, #64	; 0x40
 8002d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d40:	2300      	movs	r3, #0
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x40>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	f200 80a1 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d62:	e09b      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d68:	e09b      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6e:	e098      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d028      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	627a      	str	r2, [r7, #36]	; 0x24
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d9c:	fb03 f201 	mul.w	r2, r3, r1
 8002da0:	2300      	movs	r3, #0
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002daa:	fba0 1202 	umull	r1, r2, r0, r2
 8002dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db0:	460a      	mov	r2, r1
 8002db2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	4413      	add	r3, r2
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	61fa      	str	r2, [r7, #28]
 8002dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dca:	f7fd f9fd 	bl	80001c8 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd6:	e053      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	2200      	movs	r2, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	617a      	str	r2, [r7, #20]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dea:	f04f 0b00 	mov.w	fp, #0
 8002dee:	4652      	mov	r2, sl
 8002df0:	465b      	mov	r3, fp
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	0159      	lsls	r1, r3, #5
 8002dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e00:	0150      	lsls	r0, r2, #5
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	ebb2 080a 	subs.w	r8, r2, sl
 8002e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e22:	ebb2 0408 	subs.w	r4, r2, r8
 8002e26:	eb63 0509 	sbc.w	r5, r3, r9
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	00eb      	lsls	r3, r5, #3
 8002e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e38:	00e2      	lsls	r2, r4, #3
 8002e3a:	4614      	mov	r4, r2
 8002e3c:	461d      	mov	r5, r3
 8002e3e:	eb14 030a 	adds.w	r3, r4, sl
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	eb45 030b 	adc.w	r3, r5, fp
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e56:	4629      	mov	r1, r5
 8002e58:	028b      	lsls	r3, r1, #10
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e60:	4621      	mov	r1, r4
 8002e62:	028a      	lsls	r2, r1, #10
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e74:	f7fd f9a8 	bl	80001c8 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3740      	adds	r7, #64	; 0x40
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	017d7840 	.word	0x017d7840

08002ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07b      	b.n	8002fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ede:	d009      	beq.n	8002ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	e005      	b.n	8002ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe f988 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0104 	and.w	r1, r3, #4
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f003 0210 	and.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e041      	b.n	8003064 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f9cb 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f000 fad9 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e041      	b.n	8003102 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f839 	bl	800310a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 fa8a 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_TIM_PWM_Start+0x24>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e022      	b.n	800318a <HAL_TIM_PWM_Start+0x6a>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b04      	cmp	r3, #4
 8003148:	d109      	bne.n	800315e <HAL_TIM_PWM_Start+0x3e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e015      	b.n	800318a <HAL_TIM_PWM_Start+0x6a>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d109      	bne.n	8003178 <HAL_TIM_PWM_Start+0x58>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e008      	b.n	800318a <HAL_TIM_PWM_Start+0x6a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e07c      	b.n	800328c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0x82>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a0:	e013      	b.n	80031ca <HAL_TIM_PWM_Start+0xaa>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_PWM_Start+0x92>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b0:	e00b      	b.n	80031ca <HAL_TIM_PWM_Start+0xaa>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_PWM_Start+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c0:	e003      	b.n	80031ca <HAL_TIM_PWM_Start+0xaa>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fce0 	bl	8003b98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <HAL_TIM_PWM_Start+0x174>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_TIM_PWM_Start+0xcc>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <HAL_TIM_PWM_Start+0x178>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_TIM_PWM_Start+0xd0>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_TIM_PWM_Start+0xd2>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_TIM_PWM_Start+0x174>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003218:	d01d      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <HAL_TIM_PWM_Start+0x17c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_TIM_PWM_Start+0x180>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <HAL_TIM_PWM_Start+0x184>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_TIM_PWM_Start+0x178>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_TIM_PWM_Start+0x188>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIM_PWM_Start+0x136>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_TIM_PWM_Start+0x18c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d010      	beq.n	800328a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003278:	e007      	b.n	800328a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40010000 	.word	0x40010000
 8003298:	40010400 	.word	0x40010400
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40001800 	.word	0x40001800

080032b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0ae      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	f200 809f 	bhi.w	800341c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003319 	.word	0x08003319
 80032e8:	0800341d 	.word	0x0800341d
 80032ec:	0800341d 	.word	0x0800341d
 80032f0:	0800341d 	.word	0x0800341d
 80032f4:	08003359 	.word	0x08003359
 80032f8:	0800341d 	.word	0x0800341d
 80032fc:	0800341d 	.word	0x0800341d
 8003300:	0800341d 	.word	0x0800341d
 8003304:	0800339b 	.word	0x0800339b
 8003308:	0800341d 	.word	0x0800341d
 800330c:	0800341d 	.word	0x0800341d
 8003310:	0800341d 	.word	0x0800341d
 8003314:	080033db 	.word	0x080033db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f9f0 	bl	8003704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0208 	orr.w	r2, r2, #8
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	619a      	str	r2, [r3, #24]
      break;
 8003356:	e064      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fa40 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	619a      	str	r2, [r3, #24]
      break;
 8003398:	e043      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa95 	bl	80038d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0208 	orr.w	r2, r2, #8
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0204 	bic.w	r2, r2, #4
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	61da      	str	r2, [r3, #28]
      break;
 80033d8:	e023      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fae9 	bl	80039b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	021a      	lsls	r2, r3, #8
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	61da      	str	r2, [r3, #28]
      break;
 800341a:	e002      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
      break;
 8003420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIM_ConfigClockSource+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e0b4      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x186>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003488:	d03e      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0xd4>
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	f200 8087 	bhi.w	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	f000 8086 	beq.w	80035a6 <HAL_TIM_ConfigClockSource+0x172>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d87f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d01a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xa6>
 80034a4:	2b70      	cmp	r3, #112	; 0x70
 80034a6:	d87b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d050      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x11a>
 80034ac:	2b60      	cmp	r3, #96	; 0x60
 80034ae:	d877      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d03c      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xfa>
 80034b4:	2b50      	cmp	r3, #80	; 0x50
 80034b6:	d873      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d058      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x13a>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d86f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d064      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d86b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d060      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d867      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05c      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d05a      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	e062      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f000 fb35 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
      break;
 8003506:	e04f      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f000 fb1e 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800352a:	609a      	str	r2, [r3, #8]
      break;
 800352c:	e03c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fa92 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2150      	movs	r1, #80	; 0x50
 8003546:	4618      	mov	r0, r3
 8003548:	f000 faeb 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800354c:	e02c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	461a      	mov	r2, r3
 800355c:	f000 fab1 	bl	8003ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2160      	movs	r1, #96	; 0x60
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fadb 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800356c:	e01c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	461a      	mov	r2, r3
 800357c:	f000 fa72 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	4618      	mov	r0, r3
 8003588:	f000 facb 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800358c:	e00c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 fac2 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800359e:	e003      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <TIM_Base_SetConfig+0x118>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d027      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <TIM_Base_SetConfig+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d023      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d017      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <TIM_Base_SetConfig+0x128>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_Base_SetConfig+0x130>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <TIM_Base_SetConfig+0x134>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <TIM_Base_SetConfig+0x138>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0xf8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40001800 	.word	0x40001800
 80036fc:	40001c00 	.word	0x40001c00
 8003700:	40002000 	.word	0x40002000

08003704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x64>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC1_SetConfig+0x8e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40010400 	.word	0x40010400

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0x68>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC2_SetConfig+0x94>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d113      	bne.n	80038a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400

080038d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_OC3_SetConfig+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_OC3_SetConfig+0x92>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d113      	bne.n	800398a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <TIM_OC4_SetConfig+0xa4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC4_SetConfig+0x68>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <TIM_OC4_SetConfig+0xa8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 030a 	bic.w	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2201      	movs	r2, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1a      	ldr	r2, [r3, #32]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	401a      	ands	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e05a      	b.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d022      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d01d      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d018      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00e      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10c      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40000c00 	.word	0x40000c00
 8003cd0:	40010400 	.word	0x40010400
 8003cd4:	40014000 	.word	0x40014000
 8003cd8:	40001800 	.word	0x40001800

08003cdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e03d      	b.n	8003d74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d80:	b084      	sub	sp, #16
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	f107 001c 	add.w	r0, r7, #28
 8003d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d122      	bne.n	8003dde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 faa2 	bl	800431c <USB_CoreReset>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e01a      	b.n	8003e14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa96 	bl	800431c <USB_CoreReset>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
 8003e06:	e005      	b.n	8003e14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10b      	bne.n	8003e32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f043 0206 	orr.w	r2, r3, #6
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e3e:	b004      	add	sp, #16
 8003e40:	4770      	bx	lr

08003e42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 0201 	bic.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d115      	bne.n	8003eb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f7fd fc9a 	bl	80017cc <HAL_Delay>
      ms++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa2e 	bl	8004300 <USB_GetMode>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d01e      	beq.n	8003ee8 <USB_SetCurrentMode+0x84>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b31      	cmp	r3, #49	; 0x31
 8003eae:	d9f0      	bls.n	8003e92 <USB_SetCurrentMode+0x2e>
 8003eb0:	e01a      	b.n	8003ee8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d115      	bne.n	8003ee4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	f7fd fc81 	bl	80017cc <HAL_Delay>
      ms++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fa15 	bl	8004300 <USB_GetMode>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <USB_SetCurrentMode+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b31      	cmp	r3, #49	; 0x31
 8003ee0:	d9f0      	bls.n	8003ec4 <USB_SetCurrentMode+0x60>
 8003ee2:	e001      	b.n	8003ee8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e005      	b.n	8003ef4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b32      	cmp	r3, #50	; 0x32
 8003eec:	d101      	bne.n	8003ef2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003efc:	b084      	sub	sp, #16
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	e009      	b.n	8003f30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3340      	adds	r3, #64	; 0x40
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b0e      	cmp	r3, #14
 8003f34:	d9f2      	bls.n	8003f1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11c      	bne.n	8003f76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
 8003f74:	e00b      	b.n	8003f8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	461a      	mov	r2, r3
 8003faa:	680b      	ldr	r3, [r1, #0]
 8003fac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10c      	bne.n	8003fce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fba:	2100      	movs	r1, #0
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f965 	bl	800428c <USB_SetDevSpeed>
 8003fc2:	e008      	b.n	8003fd6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f960 	bl	800428c <USB_SetDevSpeed>
 8003fcc:	e003      	b.n	8003fd6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fce:	2103      	movs	r1, #3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f95b 	bl	800428c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fd6:	2110      	movs	r1, #16
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8f3 	bl	80041c4 <USB_FlushTxFifo>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f91f 	bl	800422c <USB_FlushRxFifo>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	461a      	mov	r2, r3
 8004000:	2300      	movs	r3, #0
 8004002:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	461a      	mov	r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e043      	b.n	80040aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004038:	d118      	bne.n	800406c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	461a      	mov	r2, r3
 800404e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e013      	b.n	800407e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	461a      	mov	r2, r3
 8004064:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e008      	b.n	800407e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	461a      	mov	r2, r3
 800409e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3301      	adds	r3, #1
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3b7      	bcc.n	8004022 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e043      	b.n	8004140 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ce:	d118      	bne.n	8004102 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	461a      	mov	r2, r3
 80040e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e013      	b.n	8004114 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e008      	b.n	8004114 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410e:	461a      	mov	r2, r3
 8004110:	2300      	movs	r3, #0
 8004112:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	461a      	mov	r2, r3
 8004134:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004138:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d3b7      	bcc.n	80040b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800415a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004168:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f043 0210 	orr.w	r2, r3, #16
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <USB_DevInit+0x2c4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f043 0208 	orr.w	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800419a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d107      	bne.n	80041b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041bc:	b004      	add	sp, #16
 80041be:	4770      	bx	lr
 80041c0:	803c3800 	.word	0x803c3800

080041c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <USB_FlushTxFifo+0x64>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e01b      	b.n	800421c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	daf2      	bge.n	80041d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3301      	adds	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <USB_FlushTxFifo+0x64>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e006      	b.n	800421c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d0f0      	beq.n	80041fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	00030d40 	.word	0x00030d40

0800422c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a11      	ldr	r2, [pc, #68]	; (8004288 <USB_FlushRxFifo+0x5c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e018      	b.n	800427c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	daf2      	bge.n	8004238 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2210      	movs	r2, #16
 800425a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <USB_FlushRxFifo+0x5c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e006      	b.n	800427c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b10      	cmp	r3, #16
 8004278:	d0f0      	beq.n	800425c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	00030d40 	.word	0x00030d40

0800428c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042d8:	f023 0303 	bic.w	r3, r3, #3
 80042dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0301 	and.w	r3, r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <USB_CoreReset+0x64>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e01b      	b.n	8004372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	daf2      	bge.n	8004328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a09      	ldr	r2, [pc, #36]	; (8004380 <USB_CoreReset+0x64>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e006      	b.n	8004372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d0f0      	beq.n	8004352 <USB_CoreReset+0x36>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	00030d40 	.word	0x00030d40

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4d0d      	ldr	r5, [pc, #52]	; (80043bc <__libc_init_array+0x38>)
 8004388:	4c0d      	ldr	r4, [pc, #52]	; (80043c0 <__libc_init_array+0x3c>)
 800438a:	1b64      	subs	r4, r4, r5
 800438c:	10a4      	asrs	r4, r4, #2
 800438e:	2600      	movs	r6, #0
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	4d0b      	ldr	r5, [pc, #44]	; (80043c4 <__libc_init_array+0x40>)
 8004396:	4c0c      	ldr	r4, [pc, #48]	; (80043c8 <__libc_init_array+0x44>)
 8004398:	f000 f820 	bl	80043dc <_init>
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	2600      	movs	r6, #0
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	0800440c 	.word	0x0800440c
 80043c0:	0800440c 	.word	0x0800440c
 80043c4:	0800440c 	.word	0x0800440c
 80043c8:	08004410 	.word	0x08004410

080043cc <memset>:
 80043cc:	4402      	add	r2, r0
 80043ce:	4603      	mov	r3, r0
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d100      	bne.n	80043d6 <memset+0xa>
 80043d4:	4770      	bx	lr
 80043d6:	f803 1b01 	strb.w	r1, [r3], #1
 80043da:	e7f9      	b.n	80043d0 <memset+0x4>

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
=======

electrium-esc-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004024  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041bc  080041bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c4  080041c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000080c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000818  20000818  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214c  00000000  00000000  00031204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00033350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00034400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223d1  00000000  00000000  000353b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b1c  00000000  00000000  00057789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d786c  00000000  00000000  000692a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140b11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004848  00000000  00000000  00140b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004194 	.word	0x08004194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004194 	.word	0x08004194

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f8d4 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82a 	bl	800052c <SystemClock_Config>
//  __HAL_RCC_GPIOB_CLK_ENABLE();

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fc80 	bl	8000ddc <MX_GPIO_Init>
  MX_TIM1_Init();
 80004dc:	f000 fa5c 	bl	8000998 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004e0:	f000 fb1e 	bl	8000b20 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e4:	f000 fc4c 	bl	8000d80 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80004e8:	f000 fbb2 	bl	8000c50 <MX_TIM4_Init>
  MX_SPI3_Init();
 80004ec:	f000 fa1e 	bl	800092c <MX_SPI3_Init>
  MX_ADC1_Init();
 80004f0:	f000 f886 	bl	8000600 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004f4:	f000 f8d6 	bl	80006a4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004f8:	f000 f926 	bl	8000748 <MX_ADC3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f9aa 	bl	8000854 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000500:	f000 f9de 	bl	80008c0 <MX_SPI2_Init>
  MX_CAN1_Init();
 8000504:	f000 f972 	bl	80007ec <MX_CAN1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000508:	2104      	movs	r1, #4
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <main+0x58>)
 800050c:	f001 ff45 	bl	800239a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <main+0x5c>)
 8000514:	f001 ff41 	bl	800239a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051c:	f001 f920 	bl	8001760 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000520:	e7f2      	b.n	8000508 <main+0x3c>
 8000522:	bf00      	nop
 8000524:	40020000 	.word	0x40020000
 8000528:	40020400 	.word	0x40020400

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fe22 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800059c:	230f      	movs	r3, #15
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 225;
 80005a0:	23e1      	movs	r3, #225	; 0xe1
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005a8:	2305      	movs	r3, #5
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 f829 	bl	8002608 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 fcfa 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fa8a 	bl	8002af8 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 fce3 	bl	8000fb4 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_ADC1_Init+0x98>)
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <MX_ADC1_Init+0x9c>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ADC1_Init+0x98>)
 800061a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800061e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_ADC1_Init+0x98>)
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <MX_ADC1_Init+0xa0>)
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_ADC1_Init+0x98>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_ADC1_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_ADC1_Init+0x98>)
 8000662:	f001 f8a1 	bl	80017a8 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 fca2 	bl	8000fb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000670:	2310      	movs	r3, #16
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_ADC1_Init+0x98>)
 8000682:	f001 f8d5 	bl	8001830 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800068c:	f000 fc92 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000028 	.word	0x20000028
 800069c:	40012000 	.word	0x40012000
 80006a0:	0f000001 	.word	0x0f000001

080006a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC2_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC2_Init+0x98>)
 80006be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC2_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC2_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC2_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC2_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC2_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC2_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC2_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC2_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC2_Init+0x98>)
 8000706:	f001 f84f 	bl	80017a8 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 fc50 	bl	8000fb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000714:	230a      	movs	r3, #10
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC2_Init+0x98>)
 8000726:	f001 f883 	bl	8001830 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 fc40 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000070 	.word	0x20000070
 8000740:	40012100 	.word	0x40012100
 8000744:	0f000001 	.word	0x0f000001

08000748 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_ADC3_Init+0x98>)
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <MX_ADC3_Init+0x9c>)
 800075e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_ADC3_Init+0x98>)
 8000762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000766:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_ADC3_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ADC3_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_ADC3_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_ADC3_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_ADC3_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_ADC3_Init+0x98>)
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_ADC3_Init+0xa0>)
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC3_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ADC3_Init+0x98>)
 8000796:	2201      	movs	r2, #1
 8000798:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_ADC3_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_ADC3_Init+0x98>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_ADC3_Init+0x98>)
 80007aa:	f000 fffd 	bl	80017a8 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007b4:	f000 fbfe 	bl	8000fb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b8:	2306      	movs	r3, #6
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC3_Init+0x98>)
 80007ca:	f001 f831 	bl	8001830 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007d4:	f000 fbee 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000b8 	.word	0x200000b8
 80007e4:	40012200 	.word	0x40012200
 80007e8:	0f000001 	.word	0x0f000001

080007ec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_CAN1_Init+0x60>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_CAN1_Init+0x64>)
 80007f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_CAN1_Init+0x60>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_CAN1_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_CAN1_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_CAN1_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_CAN1_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_CAN1_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_CAN1_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_CAN1_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_CAN1_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_CAN1_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_CAN1_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_CAN1_Init+0x60>)
 800083a:	f001 fa17 	bl	8001c6c <HAL_CAN_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fbb6 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000100 	.word	0x20000100
 8000850:	40006400 	.word	0x40006400

08000854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_SPI1_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI1_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_SPI1_Init+0x64>)
 80008a6:	f002 fad3 	bl	8002e50 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fb80 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000128 	.word	0x20000128
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI2_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI2_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI2_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI2_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI2_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI2_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI2_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI2_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI2_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI2_Init+0x64>)
 8000912:	f002 fa9d 	bl	8002e50 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 fb4a 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000180 	.word	0x20000180
 8000928:	40003800 	.word	0x40003800

0800092c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI3_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI3_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI3_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI3_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI3_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI3_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI3_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI3_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI3_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI3_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI3_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI3_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI3_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI3_Init+0x64>)
 800097e:	f002 fa67 	bl	8002e50 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 fb14 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200001d8 	.word	0x200001d8
 8000994:	40003c00 	.word	0x40003c00

08000998 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	; 0x58
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fbd7 	bl	8004184 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d6:	4b50      	ldr	r3, [pc, #320]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009d8:	4a50      	ldr	r2, [pc, #320]	; (8000b1c <MX_TIM1_Init+0x184>)
 80009da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009dc:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009e8:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <MX_TIM1_Init+0x180>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	4845      	ldr	r0, [pc, #276]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000a04:	f002 faad 	bl	8002f62 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a0e:	f000 fad1 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	483e      	ldr	r0, [pc, #248]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000a20:	f002 fc0a 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a2a:	f000 fac3 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a2e:	483a      	ldr	r0, [pc, #232]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000a30:	f002 fae6 	bl	8003000 <HAL_TIM_PWM_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a3a:	f000 fabb 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4832      	ldr	r0, [pc, #200]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000a4e:	f002 ffa5 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a58:	f000 faac 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000a82:	f002 fb17 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a8c:	f000 fa92 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	2204      	movs	r2, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	481f      	ldr	r0, [pc, #124]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000a9a:	f002 fb0b 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000aa4:	f000 fa86 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000ab2:	f002 faff 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000abc:	f000 fa7a 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000aca:	f002 faf3 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ad4:	f000 fa6e 	bl	8000fb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000afc:	f002 ffca 	bl	8003a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b06:	f000 fa55 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM1_Init+0x180>)
 8000b0c:	f000 fc58 	bl	80013c0 <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3758      	adds	r7, #88	; 0x58
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000230 	.word	0x20000230
 8000b1c:	40010000 	.word	0x40010000

08000b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b52:	4a3e      	ldr	r2, [pc, #248]	; (8000c4c <MX_TIM3_Init+0x12c>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b76:	4834      	ldr	r0, [pc, #208]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b78:	f002 f9f3 	bl	8002f62 <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b82:	f000 fa17 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b90:	4619      	mov	r1, r3
 8000b92:	482d      	ldr	r0, [pc, #180]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b94:	f002 fb50 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b9e:	f000 fa09 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ba2:	4829      	ldr	r0, [pc, #164]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000ba4:	f002 fa2c 	bl	8003000 <HAL_TIM_PWM_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bae:	f000 fa01 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4821      	ldr	r0, [pc, #132]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000bc2:	f002 feeb 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bcc:	f000 f9f2 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000be8:	f002 fa64 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bf2:	f000 f9df 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000bfe:	f002 fa59 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c08:	f000 f9d4 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000c14:	f002 fa4e 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000c1e:	f000 f9c9 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	220c      	movs	r2, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000c2a:	f002 fa43 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000c34:	f000 f9be 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000c3a:	f000 fbc1 	bl	80013c0 <HAL_TIM_MspPostInit>

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000278 	.word	0x20000278
 8000c4c:	40000400 	.word	0x40000400

08000c50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000c82:	4a3e      	ldr	r2, [pc, #248]	; (8000d7c <MX_TIM4_Init+0x12c>)
 8000c84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ca6:	4834      	ldr	r0, [pc, #208]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000ca8:	f002 f95b 	bl	8002f62 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cb2:	f000 f97f 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482d      	ldr	r0, [pc, #180]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000cc4:	f002 fab8 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cce:	f000 f971 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cd2:	4829      	ldr	r0, [pc, #164]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000cd4:	f002 f994 	bl	8003000 <HAL_TIM_PWM_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000cde:	f000 f969 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4821      	ldr	r0, [pc, #132]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000cf2:	f002 fe53 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000cfc:	f000 f95a 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000d18:	f002 f9cc 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d22:	f000 f947 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000d2e:	f002 f9c1 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d38:	f000 f93c 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000d44:	f002 f9b6 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000d4e:	f000 f931 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	220c      	movs	r2, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000d5a:	f002 f9ab 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000d64:	f000 f926 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM4_Init+0x128>)
 8000d6a:	f000 fb29 	bl	80013c0 <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200002c0 	.word	0x200002c0
 8000d7c:	40000800 	.word	0x40000800

08000d80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	f001 fb03 	bl	80023ce <HAL_PCD_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 f8f1 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000308 	.word	0x20000308

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
 8000df6:	4b69      	ldr	r3, [pc, #420]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a68      	ldr	r2, [pc, #416]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000dfc:	f043 0320 	orr.w	r3, r3, #32
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	4b62      	ldr	r3, [pc, #392]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a61      	ldr	r2, [pc, #388]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	4b5b      	ldr	r3, [pc, #364]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a5a      	ldr	r2, [pc, #360]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b58      	ldr	r3, [pc, #352]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a53      	ldr	r2, [pc, #332]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a37      	ldr	r2, [pc, #220]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <MX_GPIO_Init+0x1c0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f248 011c 	movw	r1, #32796	; 0x801c
 8000ed8:	4831      	ldr	r0, [pc, #196]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000eda:	f001 fa45 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5142 	mov.w	r1, #12416	; 0x3080
 8000ee4:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <MX_GPIO_Init+0x1c8>)
 8000ee6:	f001 fa3f 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <MX_GPIO_Init+0x1cc>)
 8000ef2:	f001 fa39 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000efc:	482b      	ldr	r0, [pc, #172]	; (8000fac <MX_GPIO_Init+0x1d0>)
 8000efe:	f001 fa33 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8000f02:	f248 031c 	movw	r3, #32796	; 0x801c
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000f1c:	f001 f888 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_7;
 8000f20:	f44f 5342 	mov.w	r3, #12416	; 0x3080
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <MX_GPIO_Init+0x1c8>)
 8000f3a:	f001 f879 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_GPIO_Init+0x1cc>)
 8000f58:	f001 f86a 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000f5c:	2390      	movs	r3, #144	; 0x90
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000f70:	f001 f85e 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_GPIO_Init+0x1d0>)
 8000f8e:	f001 f84f 	bl	8002030 <HAL_GPIO_Init>

}
 8000f92:	bf00      	nop
 8000f94:	3738      	adds	r7, #56	; 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40021800 	.word	0x40021800

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_MspInit+0x4c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a38      	ldr	r2, [pc, #224]	; (8001110 <HAL_ADC_MspInit+0x100>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10e      	bne.n	8001050 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <HAL_ADC_MspInit+0x104>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a36      	ldr	r2, [pc, #216]	; (8001114 <HAL_ADC_MspInit+0x104>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <HAL_ADC_MspInit+0x104>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800104e:	e05b      	b.n	8001108 <HAL_ADC_MspInit+0xf8>
  else if(hadc->Instance==ADC2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_ADC_MspInit+0x108>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d128      	bne.n	80010ac <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_ADC_MspInit+0x104>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <HAL_ADC_MspInit+0x104>)
 8001064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_ADC_MspInit+0x104>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_ADC_MspInit+0x104>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_ADC_MspInit+0x104>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_ADC_MspInit+0x104>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001092:	233f      	movs	r3, #63	; 0x3f
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <HAL_ADC_MspInit+0x10c>)
 80010a6:	f000 ffc3 	bl	8002030 <HAL_GPIO_Init>
}
 80010aa:	e02d      	b.n	8001108 <HAL_ADC_MspInit+0xf8>
  else if(hadc->Instance==ADC3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_ADC_MspInit+0x110>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_ADC_MspInit+0xf8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_ADC_MspInit+0x104>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_ADC_MspInit+0x104>)
 80010c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_ADC_MspInit+0x104>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_ADC_MspInit+0x104>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_ADC_MspInit+0x104>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_ADC_MspInit+0x104>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80010ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <HAL_ADC_MspInit+0x114>)
 8001104:	f000 ff94 	bl	8002030 <HAL_GPIO_Init>
}
 8001108:	bf00      	nop
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40012100 	.word	0x40012100
 800111c:	40020800 	.word	0x40020800
 8001120:	40012200 	.word	0x40012200
 8001124:	40021400 	.word	0x40021400

08001128 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_CAN_MspInit+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12b      	bne.n	80011a2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_CAN_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_CAN_MspInit+0x88>)
 8001154:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_CAN_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_CAN_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_CAN_MspInit+0x88>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_CAN_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001182:	2303      	movs	r3, #3
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001192:	2309      	movs	r3, #9
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_CAN_MspInit+0x8c>)
 800119e:	f000 ff47 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40006400 	.word	0x40006400
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_SPI_MspInit+0x150>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12c      	bne.n	8001234 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_SPI_MspInit+0x154>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a4a      	ldr	r2, [pc, #296]	; (800130c <HAL_SPI_MspInit+0x154>)
 80011e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <HAL_SPI_MspInit+0x154>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_SPI_MspInit+0x154>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a43      	ldr	r2, [pc, #268]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001212:	23e0      	movs	r3, #224	; 0xe0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001222:	2305      	movs	r3, #5
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	4838      	ldr	r0, [pc, #224]	; (8001310 <HAL_SPI_MspInit+0x158>)
 800122e:	f000 feff 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001232:	e064      	b.n	80012fe <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a36      	ldr	r2, [pc, #216]	; (8001314 <HAL_SPI_MspInit+0x15c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12d      	bne.n	800129a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <HAL_SPI_MspInit+0x154>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_SPI_MspInit+0x154>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001276:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001288:	2305      	movs	r3, #5
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4821      	ldr	r0, [pc, #132]	; (8001318 <HAL_SPI_MspInit+0x160>)
 8001294:	f000 fecc 	bl	8002030 <HAL_GPIO_Init>
}
 8001298:	e031      	b.n	80012fe <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1f      	ldr	r2, [pc, #124]	; (800131c <HAL_SPI_MspInit+0x164>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d12c      	bne.n	80012fe <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_SPI_MspInit+0x154>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_SPI_MspInit+0x154>)
 80012ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_SPI_MspInit+0x154>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_SPI_MspInit+0x154>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_SPI_MspInit+0x154>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_SPI_MspInit+0x154>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ee:	2306      	movs	r3, #6
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_SPI_MspInit+0x168>)
 80012fa:	f000 fe99 	bl	8002030 <HAL_GPIO_Init>
}
 80012fe:	bf00      	nop
 8001300:	3738      	adds	r7, #56	; 0x38
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40013000 	.word	0x40013000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40003800 	.word	0x40003800
 8001318:	40020400 	.word	0x40020400
 800131c:	40003c00 	.word	0x40003c00
 8001320:	40020800 	.word	0x40020800

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <HAL_TIM_Base_MspInit+0x8c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10e      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001352:	e026      	b.n	80013a2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_TIM_Base_MspInit+0x94>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10e      	bne.n	800137c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
}
 800137a:	e012      	b.n	80013a2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_Base_MspInit+0x98>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10d      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_TIM_Base_MspInit+0x90>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	bf00      	nop
 80013a4:	371c      	adds	r7, #28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40000400 	.word	0x40000400
 80013bc:	40000800 	.word	0x40000800

080013c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a46      	ldr	r2, [pc, #280]	; (80014f8 <HAL_TIM_MspPostInit+0x138>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d11f      	bne.n	8001422 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80013fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001410:	2301      	movs	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4839      	ldr	r0, [pc, #228]	; (8001500 <HAL_TIM_MspPostInit+0x140>)
 800141c:	f000 fe08 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001420:	e065      	b.n	80014ee <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a37      	ldr	r2, [pc, #220]	; (8001504 <HAL_TIM_MspPostInit+0x144>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d13c      	bne.n	80014a6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a31      	ldr	r2, [pc, #196]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001464:	2303      	movs	r3, #3
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001474:	2302      	movs	r3, #2
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4822      	ldr	r0, [pc, #136]	; (8001508 <HAL_TIM_MspPostInit+0x148>)
 8001480:	f000 fdd6 	bl	8002030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001484:	23c0      	movs	r3, #192	; 0xc0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001494:	2302      	movs	r3, #2
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	481b      	ldr	r0, [pc, #108]	; (800150c <HAL_TIM_MspPostInit+0x14c>)
 80014a0:	f000 fdc6 	bl	8002030 <HAL_GPIO_Init>
}
 80014a4:	e023      	b.n	80014ee <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_TIM_MspPostInit+0x150>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d11e      	bne.n	80014ee <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_TIM_MspPostInit+0x13c>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014de:	2302      	movs	r3, #2
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	480a      	ldr	r0, [pc, #40]	; (8001514 <HAL_TIM_MspPostInit+0x154>)
 80014ea:	f000 fda1 	bl	8002030 <HAL_GPIO_Init>
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40000400 	.word	0x40000400
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40000800 	.word	0x40000800
 8001514:	40020c00 	.word	0x40020c00

08001518 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001538:	d132      	bne.n	80015a0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001568:	230a      	movs	r3, #10
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <HAL_PCD_MspInit+0x94>)
 8001574:	f000 fd5c 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 800157e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001582:	6353      	str	r3, [r2, #52]	; 0x34
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6453      	str	r3, [r2, #68]	; 0x44
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <HAL_PCD_MspInit+0x90>)
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f890 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SystemInit+0x20>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <SystemInit+0x20>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001644:	4c0b      	ldr	r4, [pc, #44]	; (8001674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001652:	f7ff ffd7 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f002 fd71 	bl	800413c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7fe ff37 	bl	80004cc <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800166c:	080041cc 	.word	0x080041cc
  ldr r2, =_sbss
 8001670:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001674:	20000818 	.word	0x20000818

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_Init+0x40>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_Init+0x40>)
 8001692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x40>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 fc8f 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fc86 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fc99 	bl	8002016 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 fc6f 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000008 	.word	0x20000008
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20000814 	.word	0x20000814

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000814 	.word	0x20000814

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e033      	b.n	8001826 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fc22 	bl	8001010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d118      	bne.n	8001818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ee:	f023 0302 	bic.w	r3, r3, #2
 80017f2:	f043 0202 	orr.w	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f93a 	bl	8001a74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f023 0303 	bic.w	r3, r3, #3
 800180e:	f043 0201 	orr.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
 8001816:	e001      	b.n	800181c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1c>
 8001848:	2302      	movs	r3, #2
 800184a:	e105      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x228>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d925      	bls.n	80018a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68d9      	ldr	r1, [r3, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	3b1e      	subs	r3, #30
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	4603      	mov	r3, r0
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4403      	add	r3, r0
 800189a:	3b1e      	subs	r3, #30
 800189c:	409a      	lsls	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	e022      	b.n	80018ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6919      	ldr	r1, [r3, #16]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	2207      	movs	r2, #7
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	400a      	ands	r2, r1
 80018ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6919      	ldr	r1, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4403      	add	r3, r0
 80018e4:	409a      	lsls	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d824      	bhi.n	8001940 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b05      	subs	r3, #5
 8001908:	221f      	movs	r2, #31
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	400a      	ands	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b05      	subs	r3, #5
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
 800193e:	e04c      	b.n	80019da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d824      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b23      	subs	r3, #35	; 0x23
 800195a:	221f      	movs	r2, #31
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43da      	mvns	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	400a      	ands	r2, r1
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b23      	subs	r3, #35	; 0x23
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
 8001990:	e023      	b.n	80019da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b41      	subs	r3, #65	; 0x41
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b41      	subs	r3, #65	; 0x41
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_ADC_ConfigChannel+0x234>)
 80019dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_ADC_ConfigChannel+0x238>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1cc>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_ADC_ConfigChannel+0x238>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d123      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x21e>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d003      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x1e6>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b11      	cmp	r3, #17
 8001a14:	d11b      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d111      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_ADC_ConfigChannel+0x23c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_ADC_ConfigChannel+0x240>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	0c9a      	lsrs	r2, r3, #18
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a7c:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <ADC_Init+0x1f0>)
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	021a      	lsls	r2, r3, #8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <ADC_Init+0x1f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d022      	beq.n	8001b52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6899      	ldr	r1, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	e00f      	b.n	8001b72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0202 	bic.w	r2, r2, #2
 8001b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7e1b      	ldrb	r3, [r3, #24]
 8001b8c:	005a      	lsls	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	035a      	lsls	r2, r3, #13
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e007      	b.n	8001be8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	051a      	lsls	r2, r3, #20
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c2a:	025a      	lsls	r2, r3, #9
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6899      	ldr	r1, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	029a      	lsls	r2, r3, #10
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40012300 	.word	0x40012300
 8001c68:	0f000001 	.word	0x0f000001

08001c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0ed      	b.n	8001e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fa4c 	bl	8001128 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca0:	f7ff fd52 	bl	8001748 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ca6:	e012      	b.n	8001cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca8:	f7ff fd4e 	bl	8001748 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d90b      	bls.n	8001cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0c5      	b.n	8001e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0e5      	beq.n	8001ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0202 	bic.w	r2, r2, #2
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cec:	f7ff fd2c 	bl	8001748 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cf2:	e012      	b.n	8001d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf4:	f7ff fd28 	bl	8001748 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d90b      	bls.n	8001d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2205      	movs	r2, #5
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e09f      	b.n	8001e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e5      	bne.n	8001cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d108      	bne.n	8001d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e5b      	ldrb	r3, [r3, #25]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e9b      	ldrb	r3, [r3, #26]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d108      	bne.n	8001d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e007      	b.n	8001da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0220 	bic.w	r2, r2, #32
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7edb      	ldrb	r3, [r3, #27]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0210 	bic.w	r2, r2, #16
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e007      	b.n	8001dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0210 	orr.w	r2, r2, #16
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7f1b      	ldrb	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0208 	orr.w	r2, r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e007      	b.n	8001dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0208 	bic.w	r2, r2, #8
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7f5b      	ldrb	r3, [r3, #29]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0204 	orr.w	r2, r2, #4
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e007      	b.n	8001e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0204 	bic.w	r2, r2, #4
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	ea42 0103 	orr.w	r1, r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff47 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff5c 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffb0 	bl	8001f84 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e16b      	b.n	8002324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 815a 	bne.w	800231e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	2b02      	cmp	r3, #2
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80b4 	beq.w	800231e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b60      	ldr	r3, [pc, #384]	; (800233c <HAL_GPIO_Init+0x30c>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a5f      	ldr	r2, [pc, #380]	; (800233c <HAL_GPIO_Init+0x30c>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <HAL_GPIO_Init+0x30c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_GPIO_Init+0x310>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_GPIO_Init+0x314>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <HAL_GPIO_Init+0x226>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_GPIO_Init+0x318>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x222>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x31c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x21e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x320>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x21a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_GPIO_Init+0x324>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x216>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x328>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x212>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x32c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x20e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_GPIO_Init+0x330>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x20a>
 8002236:	2307      	movs	r3, #7
 8002238:	e00e      	b.n	8002258 <HAL_GPIO_Init+0x228>
 800223a:	2308      	movs	r3, #8
 800223c:	e00c      	b.n	8002258 <HAL_GPIO_Init+0x228>
 800223e:	2306      	movs	r3, #6
 8002240:	e00a      	b.n	8002258 <HAL_GPIO_Init+0x228>
 8002242:	2305      	movs	r3, #5
 8002244:	e008      	b.n	8002258 <HAL_GPIO_Init+0x228>
 8002246:	2304      	movs	r3, #4
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x228>
 800224a:	2303      	movs	r3, #3
 800224c:	e004      	b.n	8002258 <HAL_GPIO_Init+0x228>
 800224e:	2302      	movs	r3, #2
 8002250:	e002      	b.n	8002258 <HAL_GPIO_Init+0x228>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x228>
 8002256:	2300      	movs	r3, #0
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f002 0203 	and.w	r2, r2, #3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4093      	lsls	r3, r2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002268:	4935      	ldr	r1, [pc, #212]	; (8002340 <HAL_GPIO_Init+0x310>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_GPIO_Init+0x334>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a32      	ldr	r2, [pc, #200]	; (8002364 <HAL_GPIO_Init+0x334>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_GPIO_Init+0x334>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a27      	ldr	r2, [pc, #156]	; (8002364 <HAL_GPIO_Init+0x334>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_GPIO_Init+0x334>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ee:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_GPIO_Init+0x334>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_GPIO_Init+0x334>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <HAL_GPIO_Init+0x334>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3301      	adds	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	f67f ae90 	bls.w	800204c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40013800 	.word	0x40013800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40021400 	.word	0x40021400
 800235c:	40021800 	.word	0x40021800
 8002360:	40021c00 	.word	0x40021c00
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	041a      	lsls	r2, r3, #16
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	400b      	ands	r3, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d0:	b08f      	sub	sp, #60	; 0x3c
 80023d2:	af0a      	add	r7, sp, #40	; 0x28
 80023d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e10f      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff f88c 	bl	8001518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2203      	movs	r2, #3
 8002404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 fbeb 	bl	8003bfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	687e      	ldr	r6, [r7, #4]
 800242c:	466d      	mov	r5, sp
 800242e:	f106 0410 	add.w	r4, r6, #16
 8002432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800243a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800243e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002442:	1d33      	adds	r3, r6, #4
 8002444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	f001 fb76 	bl	8003b38 <USB_CoreInit>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0d0      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fbd9 	bl	8003c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e04a      	b.n	8002506 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	333c      	adds	r3, #60	; 0x3c
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b298      	uxth	r0, r3
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3344      	adds	r3, #68	; 0x44
 80024ac:	4602      	mov	r2, r0
 80024ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3340      	adds	r3, #64	; 0x40
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3348      	adds	r3, #72	; 0x48
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	334c      	adds	r3, #76	; 0x4c
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3354      	adds	r3, #84	; 0x54
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3af      	bcc.n	8002470 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e044      	b.n	80025a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3b5      	bcc.n	8002516 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	687e      	ldr	r6, [r7, #4]
 80025b2:	466d      	mov	r5, sp
 80025b4:	f106 0410 	add.w	r4, r6, #16
 80025b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c8:	1d33      	adds	r3, r6, #4
 80025ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f001 fb71 	bl	8003cb4 <USB_DevInit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00d      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 fd3c 	bl	8004076 <USB_DevDisconnect>

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e267      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d075      	beq.n	8002712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d00c      	beq.n	800264c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b85      	ldr	r3, [pc, #532]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	2b08      	cmp	r3, #8
 800263c:	d112      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4b82      	ldr	r3, [pc, #520]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264a:	d10b      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	4b7e      	ldr	r3, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05b      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e242      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x74>
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6f      	ldr	r2, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6c      	ldr	r2, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 80026a0:	4b69      	ldr	r3, [pc, #420]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a65      	ldr	r2, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff f842 	bl	8001748 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff f83e 	bl	8001748 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e207      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff f82e 	bl	8001748 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff f82a 	bl	8001748 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1f3      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b51      	ldr	r3, [pc, #324]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b44      	ldr	r3, [pc, #272]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1c7      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4937      	ldr	r1, [pc, #220]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e03a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x244>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe ffe3 	bl	8001748 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe ffdf 	bl	8001748 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1a8      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x244>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ffc2 	bl	8001748 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe ffbe 	bl	8001748 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e187      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d036      	beq.n	8002860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_RCC_OscConfig+0x248>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe ffa2 	bl	8001748 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe ff9e 	bl	8001748 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e167      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800281c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x200>
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x248>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe ff8b 	bl	8001748 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe ff87 	bl	8001748 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d907      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e150      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ea      	bne.n	8002836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8097 	beq.w	800299c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a7c      	ldr	r2, [pc, #496]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b7a      	ldr	r3, [pc, #488]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ff47 	bl	8001748 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe ff43 	bl	8001748 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e10c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2ea>
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x30c>
 80028fa:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a5e      	ldr	r2, [pc, #376]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 8002914:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe ff08 	bl	8001748 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe ff04 	bl	8001748 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0cb      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ee      	beq.n	800293c <HAL_RCC_OscConfig+0x334>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fef2 	bl	8001748 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe feee 	bl	8001748 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0b5      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ee      	bne.n	8002968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a1 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a6:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d05c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d141      	bne.n	8002a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fec2 	bl	8001748 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe febe 	bl	8001748 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e087      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	041b      	lsls	r3, r3, #16
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	491b      	ldr	r1, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fe97 	bl	8001748 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fe93 	bl	8001748 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e05c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x416>
 8002a3c:	e054      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fe80 	bl	8001748 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fe7c 	bl	8001748 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e045      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x444>
 8002a6a:	e03d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e038      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d121      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d90c      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e067      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4934      	ldr	r1, [pc, #208]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fdae 	bl	8001748 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fdaa 	bl	8001748 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f821 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fd0e 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	080041ac 	.word	0x080041ac
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b090      	sub	sp, #64	; 0x40
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f200 80a1 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf6:	e09b      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cfc:	e09b      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d02:	e098      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d028      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	627a      	str	r2, [r7, #36]	; 0x24
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d30:	fb03 f201 	mul.w	r2, r3, r1
 8002d34:	2300      	movs	r3, #0
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d44:	460a      	mov	r2, r1
 8002d46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	2200      	movs	r2, #0
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	61fa      	str	r2, [r7, #28]
 8002d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d5e:	f7fd fa33 	bl	80001c8 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4613      	mov	r3, r2
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6a:	e053      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	617a      	str	r2, [r7, #20]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d7e:	f04f 0b00 	mov.w	fp, #0
 8002d82:	4652      	mov	r2, sl
 8002d84:	465b      	mov	r3, fp
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	0159      	lsls	r1, r3, #5
 8002d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d94:	0150      	lsls	r0, r2, #5
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d9e:	eb63 090b 	sbc.w	r9, r3, fp
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002db2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002db6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dba:	eb63 0509 	sbc.w	r5, r3, r9
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	00eb      	lsls	r3, r5, #3
 8002dc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dcc:	00e2      	lsls	r2, r4, #3
 8002dce:	4614      	mov	r4, r2
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	eb14 030a 	adds.w	r3, r4, sl
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	eb45 030b 	adc.w	r3, r5, fp
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dea:	4629      	mov	r1, r5
 8002dec:	028b      	lsls	r3, r1, #10
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df4:	4621      	mov	r1, r4
 8002df6:	028a      	lsls	r2, r1, #10
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e08:	f7fd f9de 	bl	80001c8 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3740      	adds	r7, #64	; 0x40
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	017d7840 	.word	0x017d7840

08002e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07b      	b.n	8002f5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e72:	d009      	beq.n	8002e88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
 8002e7a:	e005      	b.n	8002e88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f988 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	ea42 0103 	orr.w	r1, r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0104 	and.w	r1, r3, #4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f003 0210 	and.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e041      	b.n	8002ff8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe f9cb 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 fa11 	bl	80033c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e041      	b.n	8003096 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f839 	bl	800309e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 f9c2 	bl	80033c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e0ae      	b.n	8003230 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	f200 809f 	bhi.w	8003220 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	08003221 	.word	0x08003221
 80030f0:	08003221 	.word	0x08003221
 80030f4:	08003221 	.word	0x08003221
 80030f8:	0800315d 	.word	0x0800315d
 80030fc:	08003221 	.word	0x08003221
 8003100:	08003221 	.word	0x08003221
 8003104:	08003221 	.word	0x08003221
 8003108:	0800319f 	.word	0x0800319f
 800310c:	08003221 	.word	0x08003221
 8003110:	08003221 	.word	0x08003221
 8003114:	08003221 	.word	0x08003221
 8003118:	080031df 	.word	0x080031df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f9f0 	bl	8003508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0208 	orr.w	r2, r2, #8
 8003136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0204 	bic.w	r2, r2, #4
 8003146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	619a      	str	r2, [r3, #24]
      break;
 800315a:	e064      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa40 	bl	80035e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	619a      	str	r2, [r3, #24]
      break;
 800319c:	e043      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fa95 	bl	80036d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0208 	orr.w	r2, r2, #8
 80031b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0204 	bic.w	r2, r2, #4
 80031c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
      break;
 80031dc:	e023      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fae9 	bl	80037bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	021a      	lsls	r2, r3, #8
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	61da      	str	r2, [r3, #28]
      break;
 800321e:	e002      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
      break;
 8003224:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIM_ConfigClockSource+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e0b4      	b.n	80033be <HAL_TIM_ConfigClockSource+0x186>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328c:	d03e      	beq.n	800330c <HAL_TIM_ConfigClockSource+0xd4>
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003292:	f200 8087 	bhi.w	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	f000 8086 	beq.w	80033aa <HAL_TIM_ConfigClockSource+0x172>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d87f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b70      	cmp	r3, #112	; 0x70
 80032a6:	d01a      	beq.n	80032de <HAL_TIM_ConfigClockSource+0xa6>
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d87b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b60      	cmp	r3, #96	; 0x60
 80032ae:	d050      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x11a>
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d877      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b50      	cmp	r3, #80	; 0x50
 80032b6:	d03c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xfa>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d873      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d058      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x13a>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d86f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b30      	cmp	r3, #48	; 0x30
 80032c6:	d064      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d86b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d060      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d867      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05c      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d05a      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	e062      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f000 fb35 	bl	800395c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	609a      	str	r2, [r3, #8]
      break;
 800330a:	e04f      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f000 fb1e 	bl	800395c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800332e:	609a      	str	r2, [r3, #8]
      break;
 8003330:	e03c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	f000 fa92 	bl	8003868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2150      	movs	r1, #80	; 0x50
 800334a:	4618      	mov	r0, r3
 800334c:	f000 faeb 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003350:	e02c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	461a      	mov	r2, r3
 8003360:	f000 fab1 	bl	80038c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2160      	movs	r1, #96	; 0x60
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fadb 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003370:	e01c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	f000 fa72 	bl	8003868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	4618      	mov	r0, r3
 800338c:	f000 facb 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003390:	e00c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f000 fac2 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80033a2:	e003      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e000      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a40      	ldr	r2, [pc, #256]	; (80034dc <TIM_Base_SetConfig+0x114>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e6:	d00f      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3d      	ldr	r2, [pc, #244]	; (80034e0 <TIM_Base_SetConfig+0x118>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3c      	ldr	r2, [pc, #240]	; (80034e4 <TIM_Base_SetConfig+0x11c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <TIM_Base_SetConfig+0x120>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <TIM_Base_SetConfig+0x124>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <TIM_Base_SetConfig+0x114>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d027      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <TIM_Base_SetConfig+0x118>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d023      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <TIM_Base_SetConfig+0x11c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <TIM_Base_SetConfig+0x120>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a29      	ldr	r2, [pc, #164]	; (80034ec <TIM_Base_SetConfig+0x124>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d017      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <TIM_Base_SetConfig+0x128>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <TIM_Base_SetConfig+0x12c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <TIM_Base_SetConfig+0x130>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a25      	ldr	r2, [pc, #148]	; (80034fc <TIM_Base_SetConfig+0x134>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a24      	ldr	r2, [pc, #144]	; (8003500 <TIM_Base_SetConfig+0x138>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a23      	ldr	r2, [pc, #140]	; (8003504 <TIM_Base_SetConfig+0x13c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <TIM_Base_SetConfig+0x114>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <TIM_Base_SetConfig+0x124>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40010400 	.word	0x40010400
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800
 80034fc:	40001800 	.word	0x40001800
 8003500:	40001c00 	.word	0x40001c00
 8003504:	40002000 	.word	0x40002000

08003508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0302 	bic.w	r3, r3, #2
 8003550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <TIM_OC1_SetConfig+0xd8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_OC1_SetConfig+0x64>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <TIM_OC1_SetConfig+0xdc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10c      	bne.n	8003586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0308 	bic.w	r3, r3, #8
 8003572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <TIM_OC1_SetConfig+0xd8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_OC1_SetConfig+0x8e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <TIM_OC1_SetConfig+0xdc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d111      	bne.n	80035ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010400 	.word	0x40010400

080035e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0210 	bic.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0320 	bic.w	r3, r3, #32
 8003632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a22      	ldr	r2, [pc, #136]	; (80036cc <TIM_OC2_SetConfig+0xe4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_OC2_SetConfig+0x68>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <TIM_OC2_SetConfig+0xe8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10d      	bne.n	800366c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <TIM_OC2_SetConfig+0xe4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_OC2_SetConfig+0x94>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <TIM_OC2_SetConfig+0xe8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d113      	bne.n	80036a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800368a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40010400 	.word	0x40010400

080036d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800371c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <TIM_OC3_SetConfig+0xe0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC3_SetConfig+0x66>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <TIM_OC3_SetConfig+0xe4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10d      	bne.n	8003756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <TIM_OC3_SetConfig+0xe0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_OC3_SetConfig+0x92>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <TIM_OC3_SetConfig+0xe4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d113      	bne.n	800378e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010400 	.word	0x40010400

080037bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	031b      	lsls	r3, r3, #12
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <TIM_OC4_SetConfig+0xa4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_OC4_SetConfig+0x68>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a11      	ldr	r2, [pc, #68]	; (8003864 <TIM_OC4_SetConfig+0xa8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d109      	bne.n	8003838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40010400 	.word	0x40010400

08003868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f023 0210 	bic.w	r2, r3, #16
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	031b      	lsls	r3, r3, #12
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	431a      	orrs	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e05a      	b.n	8003a6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d01d      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10c      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40010400 	.word	0x40010400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40001800 	.word	0x40001800

08003a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e03d      	b.n	8003b2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b38:	b084      	sub	sp, #16
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	f107 001c 	add.w	r0, r7, #28
 8003b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d122      	bne.n	8003b96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 faa2 	bl	80040d4 <USB_CoreReset>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e01a      	b.n	8003bcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa96 	bl	80040d4 <USB_CoreReset>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbe:	e005      	b.n	8003bcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10b      	bne.n	8003bea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f043 0206 	orr.w	r2, r3, #6
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bf6:	b004      	add	sp, #16
 8003bf8:	4770      	bx	lr

08003bfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d115      	bne.n	8003c6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7fd fd88 	bl	8001760 <HAL_Delay>
      ms++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3301      	adds	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa2e 	bl	80040b8 <USB_GetMode>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d01e      	beq.n	8003ca0 <USB_SetCurrentMode+0x84>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b31      	cmp	r3, #49	; 0x31
 8003c66:	d9f0      	bls.n	8003c4a <USB_SetCurrentMode+0x2e>
 8003c68:	e01a      	b.n	8003ca0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d115      	bne.n	8003c9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f7fd fd6f 	bl	8001760 <HAL_Delay>
      ms++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa15 	bl	80040b8 <USB_GetMode>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <USB_SetCurrentMode+0x84>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b31      	cmp	r3, #49	; 0x31
 8003c98:	d9f0      	bls.n	8003c7c <USB_SetCurrentMode+0x60>
 8003c9a:	e001      	b.n	8003ca0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e005      	b.n	8003cac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b32      	cmp	r3, #50	; 0x32
 8003ca4:	d101      	bne.n	8003caa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e009      	b.n	8003ce8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3340      	adds	r3, #64	; 0x40
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b0e      	cmp	r3, #14
 8003cec:	d9f2      	bls.n	8003cd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11c      	bne.n	8003d2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d2c:	e00b      	b.n	8003d46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	4619      	mov	r1, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	461a      	mov	r2, r3
 8003d62:	680b      	ldr	r3, [r1, #0]
 8003d64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10c      	bne.n	8003d86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d72:	2100      	movs	r1, #0
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f965 	bl	8004044 <USB_SetDevSpeed>
 8003d7a:	e008      	b.n	8003d8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f960 	bl	8004044 <USB_SetDevSpeed>
 8003d84:	e003      	b.n	8003d8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d86:	2103      	movs	r1, #3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f95b 	bl	8004044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d8e:	2110      	movs	r1, #16
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8f3 	bl	8003f7c <USB_FlushTxFifo>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f91f 	bl	8003fe4 <USB_FlushRxFifo>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	461a      	mov	r2, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e043      	b.n	8003e62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df0:	d118      	bne.n	8003e24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	461a      	mov	r2, r3
 8003e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e013      	b.n	8003e36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e008      	b.n	8003e36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e30:	461a      	mov	r2, r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	461a      	mov	r2, r3
 8003e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3b7      	bcc.n	8003dda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e043      	b.n	8003ef8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e86:	d118      	bne.n	8003eba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e013      	b.n	8003ecc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	e008      	b.n	8003ecc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eea:	461a      	mov	r2, r3
 8003eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3b7      	bcc.n	8003e70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <USB_DevInit+0x2c4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f043 0208 	orr.w	r2, r3, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f74:	b004      	add	sp, #16
 8003f76:	4770      	bx	lr
 8003f78:	803c3800 	.word	0x803c3800

08003f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <USB_FlushTxFifo+0x64>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e01b      	b.n	8003fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	daf2      	bge.n	8003f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	019b      	lsls	r3, r3, #6
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <USB_FlushTxFifo+0x64>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e006      	b.n	8003fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d0f0      	beq.n	8003fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	00030d40 	.word	0x00030d40

08003fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a11      	ldr	r2, [pc, #68]	; (8004040 <USB_FlushRxFifo+0x5c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e018      	b.n	8004034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	daf2      	bge.n	8003ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2210      	movs	r2, #16
 8004012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a08      	ldr	r2, [pc, #32]	; (8004040 <USB_FlushRxFifo+0x5c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e006      	b.n	8004034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b10      	cmp	r3, #16
 8004030:	d0f0      	beq.n	8004014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	00030d40 	.word	0x00030d40

08004044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004090:	f023 0303 	bic.w	r3, r3, #3
 8004094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a13      	ldr	r2, [pc, #76]	; (8004138 <USB_CoreReset+0x64>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e01b      	b.n	800412a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	daf2      	bge.n	80040e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f043 0201 	orr.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <USB_CoreReset+0x64>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d0f0      	beq.n	800410a <USB_CoreReset+0x36>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	00030d40 	.word	0x00030d40

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	4d0d      	ldr	r5, [pc, #52]	; (8004174 <__libc_init_array+0x38>)
 8004140:	4c0d      	ldr	r4, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004142:	1b64      	subs	r4, r4, r5
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	2600      	movs	r6, #0
 8004148:	42a6      	cmp	r6, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	4d0b      	ldr	r5, [pc, #44]	; (800417c <__libc_init_array+0x40>)
 800414e:	4c0c      	ldr	r4, [pc, #48]	; (8004180 <__libc_init_array+0x44>)
 8004150:	f000 f820 	bl	8004194 <_init>
 8004154:	1b64      	subs	r4, r4, r5
 8004156:	10a4      	asrs	r4, r4, #2
 8004158:	2600      	movs	r6, #0
 800415a:	42a6      	cmp	r6, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	f855 3b04 	ldr.w	r3, [r5], #4
 8004164:	4798      	blx	r3
 8004166:	3601      	adds	r6, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	f855 3b04 	ldr.w	r3, [r5], #4
 800416e:	4798      	blx	r3
 8004170:	3601      	adds	r6, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	080041c4 	.word	0x080041c4
 8004178:	080041c4 	.word	0x080041c4
 800417c:	080041c4 	.word	0x080041c4
 8004180:	080041c8 	.word	0x080041c8

08004184 <memset>:
 8004184:	4402      	add	r2, r0
 8004186:	4603      	mov	r3, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	f803 1b01 	strb.w	r1, [r3], #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
>>>>>>> 540525ed867fd50e6e3835a5451e9acd24498d2a
